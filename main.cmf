%CMF
# %PSECTS Section
# For each object file, details of its psects are enumerated here.
# The begining of the section is indicated by %PSECTS.  The first
# line indicates the name of the first object file, e.g.
#    $foo.obj
# Each line that follows describes a psect in that object file, until
# the next object file.  The lines that describe a psect have the
# format:
#    <psect name> <class name> <space> <link address> <load addresses> <length> <delta>
# All addresses and the length are given in unqualified hexadecimal
# in delta units.  Any other numeric values are decimal.
%PSECTS
$main.obj
cinit ENTRY 0 3 3 2 2
maintext CODE 0 5 5 1 2
$startup.obj
reset_wrap ENTRY 0 0 0 2 2
reset_vec CODE 0 FF FF 1 2
end_init ENTRY 0 2 2 1 2
# %UNUSED Section
# This section enumerates the unused ranges of each CLASS. Each entry
# is described on a single line as follows:
#    <class name> <range> <delta>
# Addresses given in the range are in hexadecimal and units of delta.
%UNUSED
RAM 10-1B 1
BANK0 10-1B 1
ENTRY 6-FE 2
IDLOC 100-103 2
STACK 10-1B 1
CODE 6-FE 2
SFR0 0-F 1
CONFIG FFF-FFF 2
STRCODE 6-FE 2
STRING 6-FE 2
# %LINETAB Section
# This section enumerates the file/line to address mappings.
# The beginning of the section is indicated by %LINETAB.
# The first line indicates the name of the first object file, e.g.
#   $foo.obj
# Each line that follows describes a single mapping until the next
# object file.  Mappings have the following format:
#    <address> <psect name> <class name> ><line number>:<file name>
# The address is absolute and given given in unqualified hex 
# in delta units of the psect. All mappings within an object file
# are in ascending order of addresses.
# All other numeric values are in decimal.
%LINETAB
$main.obj
3 cinit ENTRY >114:/home/dbundgaard/code/blinky-pic10f200/main.as
3 cinit ENTRY >117:/home/dbundgaard/code/blinky-pic10f200/main.as
3 cinit ENTRY >123:/home/dbundgaard/code/blinky-pic10f200/main.as
3 cinit ENTRY >125:/home/dbundgaard/code/blinky-pic10f200/main.as
4 cinit ENTRY >126:/home/dbundgaard/code/blinky-pic10f200/main.as
5 maintext CODE >4:/home/dbundgaard/code/blinky-pic10f200/src/main.c
5 maintext CODE >6:/home/dbundgaard/code/blinky-pic10f200/src/main.c
$startup.obj
2 end_init ENTRY >64:/home/dbundgaard/code/blinky-pic10f200/startup.as
0 reset_wrap ENTRY >55:/home/dbundgaard/code/blinky-pic10f200/startup.as
1 reset_wrap ENTRY >56:/home/dbundgaard/code/blinky-pic10f200/startup.as
# %SYMTAB Section
# An enumeration of all symbols in the program.
# The beginning of the section is indicated by %SYMTAB.
# Each line describes a single symbol as follows:
#    <label> <value> [-]<load-adj> <class> <space> <psect> <file-name>
# The value and load-adj are both in unqualified hexadecimal.
# All other numeric values are in decimal.  The load-adj is the
# quantity one needs to add to the symbol value in order to obtain the load
# address of the symbol.  This value may be signed. If the symbol
# was defined in a psect then <psect> will be "-". File-name
# is the name of the object file in which the symbol was defined.
%SYMTAB
___latbits 0 0 ABS 0 - main.obj
__Hspace_0 100 0 ABS 0 - -
__Hspace_1 0 0 ABS 0 - -
__Hspace_2 0 0 ABS 0 - -
ltemp0 1C 0 ABS 0 - main.obj
__Hstrings 0 0 STRING 0 strings -
___sp 0 0 STACK 2 stack startup.obj
_main A 0 CODE 0 maintext main.obj
btemp 1C 0 ABS 0 - main.obj
start 4 0 ENTRY 0 init startup.obj
__size_of_main 0 0 ABS 0 - main.obj
__Hpowerup 0 0 CODE 0 powerup -
ttemp0 1C 0 ABS 0 - main.obj
wtemp0 1C 0 ABS 0 - main.obj
wtemp1 1E 0 ABS 0 - main.obj
__Hfunctab 0 0 ENTRY 0 functab -
__Hclrtext A 0 ENTRY 0 clrtext -
__Lmaintext 0 0 ABS 0 maintext -
___stackhi 0 0 ABS 0 - startup.obj
___stacklo 0 0 ABS 0 - startup.obj
__Hjmp_tab 0 0 ABS 0 jmp_tab -
start_initialization 6 0 ENTRY 0 cinit main.obj
__pcstackBANK0 0 0 BANK0 1 cstackBANK0 main.obj
___int_sp 0 0 STACK 2 stack startup.obj
__Hbank0 0 0 ABS 0 bank0 -
__Hcinit A 0 ENTRY 0 cinit -
__Hstack 0 0 STACK 2 stack -
__Hmaintext 0 0 ABS 0 maintext -
__Hcommon 0 0 ABS 0 common -
__Lbank0 0 0 ABS 0 bank0 -
__Lcinit 6 0 ENTRY 0 cinit -
__Lstack 0 0 STACK 2 stack -
__Habs1 0 0 ABS 0 abs1 -
__Hcode 0 0 ABS 0 code -
__Hinit 4 0 ENTRY 0 init -
__Hsfr0 0 0 ABS 0 sfr0 -
__Htext 0 0 ABS 0 text -
__Labs1 0 0 ABS 0 abs1 -
__Lcode 0 0 ABS 0 code -
__Linit 4 0 ENTRY 0 init -
__Lsfr0 0 0 ABS 0 sfr0 -
__Ltext 0 0 ABS 0 text -
__LcstackBANK0 0 0 ABS 0 cstackBANK0 -
__HcstackCOMMON 0 0 ABS 0 cstackCOMMON -
__S0 6 0 ABS 0 - -
__S1 0 0 ABS 0 - -
__S2 0 0 ABS 0 - -
reset_vec 1FE 0 CODE 0 reset_vec startup.obj
__pmaintext A 0 CODE 0 maintext main.obj
__Lcommon 0 0 ABS 0 common -
__Lspace_0 0 0 ABS 0 - -
__Lspace_1 0 0 ABS 0 - -
__Lspace_2 0 0 ABS 0 - -
__HcstackBANK0 0 0 ABS 0 cstackBANK0 -
__Lend_init 4 0 ENTRY 0 end_init -
__LcstackCOMMON 0 0 ABS 0 cstackCOMMON -
end_of_initialization 6 0 ENTRY 0 cinit main.obj
__Lstrings 0 0 STRING 0 strings -
__Hreset_vec 200 0 CODE 0 reset_vec -
__Lpowerup 0 0 CODE 0 powerup -
__Lreset_vec 1FE 0 CODE 0 reset_vec -
__end_of__initialization 6 0 ENTRY 0 cinit main.obj
__Lfunctab 0 0 ENTRY 0 functab -
__Lclrtext A 0 ENTRY 0 clrtext -
__pcstackCOMMON 0 0 COMMON 1 cstackCOMMON main.obj
__Hreset_wrap 4 0 ENTRY 0 reset_wrap -
__Hend_init 6 0 ENTRY 0 end_init -
__end_of_main C 0 CODE 0 maintext main.obj
__Hram 0 0 ABS 0 ram -
__Lram 0 0 ABS 0 ram -
__initialization 6 0 ENTRY 0 cinit main.obj
__Ljmp_tab 0 0 ABS 0 jmp_tab -
__Lreset_wrap 0 0 ENTRY 0 reset_wrap -
# %SPLITSTAB Section
# This section enumerates all the psect splits performed by the assembler.
# The beginning of the section is indicated by %SPLITSTAB.
# Each line is a record a particular split, where the parent psect is on
# the left and the child on the right.  Note that a child psect is always
# split form the top of the parent psect. All splits from a given parent
# are listed in the order in which they occurred.
%SPLITSTAB
# %DABS Section
# This section contains a table of all usuage of the assember
# directive DABS in the program. Each line has the following format:
#   <name> <space> <address> <size>
# If the DABS was originally labelled then that shall be <name>,
# otherwise name will be "-".  The <space> number is in decimal.
# <address> and <size> are in byte units as unqaulified hexadecimal
%DABS
- 1 1C 4
# %SEGMENTS Section
# This sections enumerates the segments of the program.  Each segment
# is described on a single line as follows:
#    <name> <space> <link address> <file address> <size> <delta>
# Addresses and size are in unqualified hexadecimal.  The link address
# and size are in units of delta. The file address is in units of bytes.
# All other numeric quantities are in decimal.
%SEGMENTS
maintext 0 5 A 1 2
reset_wrap 0 0 0 5 2
reset_vec 0 FF 1FE 1 2
# %NOTES Section
# This section contains data of all the note-psects.  The beginning of the section
# is indicated by %NOTES. The first line indicates the name and decimal
# byte-length of the first note-psect, e.g.
#   $codecov_info_hdr 16
# Each line that follows contains the byte-data of the psect in hexadecimal as a
# space-separated list. These lines are limited to 16 bytes of data.
%NOTES
